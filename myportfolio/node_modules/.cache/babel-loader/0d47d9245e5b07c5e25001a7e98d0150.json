{"ast":null,"code":"var _jsxFileName = \"/Users/dilyaratulegenova/Documents/github/MyOwnPortfolio/myportfolio/src/Components/Carousel/Carousel.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport \"./Carousel.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst carousel = {\n  overflow: \"hidden\",\n  backgroundColor: \"yellow\"\n};\nexport const CarouselItem = _ref => {\n  let {\n    children,\n    width\n  } = _ref;\n  console.log(\"width\", width);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: width,\n      display: \"inline-flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: \"500px\",\n      backgroundColor: \"green\",\n      color: \"#fff\"\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 13\n  }, this);\n};\n_c = CarouselItem;\n\nconst Carousel = _ref2 => {\n  _s();\n\n  let {\n    children\n  } = _ref2;\n  const [activeIndex, setActiveIndex] = useState(0);\n\n  const updateIndex = newIndex => {\n    if (newIndex < 0) {\n      newIndex = React.Children.count(children) - 1;\n    } else if (newIndex >= React.Children.count(children)) {\n      newIndex = 0;\n    }\n\n    setActiveIndex(newIndex);\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      updateIndex(activeIndex + 1);\n    }, 1000);\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: carousel,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        transform: `translateX(-${activeIndex * 100}%)`,\n        whiteSpace: \"nowrap\",\n        transition: \"transform 0.3s\"\n      },\n      children: React.Children.map(children, (child, index) => {\n        return /*#__PURE__*/React.cloneElement(child, {\n          width: \"100%\"\n        });\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"indicators\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          updateIndex(activeIndex - 1);\n        },\n        children: \"Prev\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), React.Children.map(children, (child, index) => {\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${index === activeIndex ? \"active\" : \"\"}`,\n          onClick: () => {\n            updateIndex(index);\n          },\n          children: index + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 29\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateIndex(activeIndex + 1),\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}; // #endregion\n\n\n_s(Carousel, \"16En7kR7TbAJMjBrm+xutVNIc5Q=\");\n\n_c2 = Carousel;\nexport default Carousel;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CarouselItem\");\n$RefreshReg$(_c2, \"Carousel\");","map":{"version":3,"sources":["/Users/dilyaratulegenova/Documents/github/MyOwnPortfolio/myportfolio/src/Components/Carousel/Carousel.js"],"names":["React","useState","carousel","overflow","backgroundColor","CarouselItem","children","width","console","log","display","alignItems","justifyContent","height","color","Carousel","activeIndex","setActiveIndex","updateIndex","newIndex","Children","count","useEffect","interval","setInterval","clearInterval","transform","whiteSpace","transition","map","child","index","cloneElement"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport \"./Carousel.css\";\n\n\n\n\nconst carousel = {\n    overflow: \"hidden\",\n    backgroundColor: \"yellow\"\n}\n\n\n\nexport const CarouselItem = ({ children, width }) => {\n    console.log(\"width\", width)\n    return (<div style={{\n        width: width,\n        display: \"inline-flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        height: \"500px\",\n        backgroundColor: \"green\",\n        color: \"#fff\",\n\n    }}>\n        {children}\n    </div>\n    );\n}\n\n\nconst Carousel = ({ children }) => {\n    const [activeIndex, setActiveIndex] = useState(0);\n\n    const updateIndex = (newIndex) => {\n        if (newIndex < 0) {\n            newIndex = React.Children.count(children) - 1;\n\n        } else if (newIndex >= React.Children.count(children)) {\n            newIndex = 0;\n        }\n\n        setActiveIndex(newIndex);\n    }\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            updateIndex(activeIndex + 1);\n        }, 1000);\n\n        return () => {\n            if (interval) {\n                clearInterval(interval);\n            }\n        };\n    })\n\n    return (\n        <div style={carousel}>\n            <div style={{\n                transform: `translateX(-${activeIndex * 100}%)`,\n                whiteSpace: \"nowrap\",\n                transition: \"transform 0.3s\",\n\n            }}>\n                {\n                    React.Children.map(children, (child, index) => {\n                        return React.cloneElement(child, { width: \"100%\" });\n                    })}\n            </div>\n            <div className=\"indicators\">\n                <button onClick={() => { updateIndex(activeIndex - 1) }}>\n                    Prev\n            </button>\n                {\n                    React.Children.map(children, (child, index) => {\n                        return (\n                            <button\n                                className={`${index === activeIndex ? \"active\" : \"\"}`}\n                                onClick={() => {\n                                    updateIndex(index)\n                                }}>\n                                {index + 1}\n                            </button>\n                        )\n                    })\n                }\n                <button onClick={() => updateIndex(activeIndex + 1)}>\n                    Next\n            </button>\n\n            </div>\n        </div>\n    );\n}\n\n\n// #endregion\n\nexport default Carousel;"]},"metadata":{},"sourceType":"module"}