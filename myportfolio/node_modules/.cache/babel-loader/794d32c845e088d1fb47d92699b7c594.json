{"ast":null,"code":"var _jsxFileName = \"/Users/dilyaratulegenova/Documents/github/MyOwnPortfolio/myportfolio/src/Components/Carousel/Carousel.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport \"./Carousel.css\";\nimport { useSwipeable } from \"react-swipeable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst carousel = {\n  marginTop: \"2rem\",\n  paddingTop: \"2rem\",\n  paddingBottom: \"2rem\",\n  overflow: \"hidden\",\n  backgroundColor: \"yellow\",\n  width: \"100%\"\n};\nexport const CarouselItem = _ref => {\n  let {\n    children,\n    width\n  } = _ref;\n  console.log(\"CarouselItem: \", children);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: width,\n      display: \"inline-flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: \"500px\",\n      border: \"2px solid red\"\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 13\n  }, this);\n};\n_c = CarouselItem;\n\nconst Carousel = _ref2 => {\n  _s();\n\n  let {\n    children\n  } = _ref2;\n  let dumArr = new Array(Math.ceil(children.length / 2));\n  const [paused, setPaused] = useState(false);\n  const [activeIndex, setActiveIndex] = useState(0);\n\n  const updateIndex = newIndex => {\n    if (newIndex < 0) {\n      newIndex = React.Children.count(children) - 2;\n    } else if (newIndex >= React.Children.count(children) / 2) {\n      newIndex = 0;\n    }\n\n    setActiveIndex(newIndex);\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (!paused) {\n        updateIndex(activeIndex + 1);\n      }\n    }, 3000);\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  });\n  const handlers = useSwipeable({\n    onSwipedLeft: () => updateIndex(activeIndex + 1),\n    onSwipedRight: () => updateIndex(activeIndex - 1)\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", { ...handlers,\n    style: carousel,\n    onMouseEnter: () => setPaused(true),\n    onMouseLeave: () => setPaused(false),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        transform: `translateX(-${activeIndex * 100}%)`,\n        whiteSpace: \"nowrap\",\n        transition: \"transform 0.3s\"\n      },\n      children: React.Children.map(children, (child, index) => {\n        return /*#__PURE__*/React.cloneElement(child, {\n          width: \"50%\"\n        });\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"indicators\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"arrorButtonLink\",\n        onClick: () => {\n          console.log(activeIndex);\n          return updateIndex(activeIndex - 1);\n        },\n        children: \"Prev\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), React.Children.map(dumArr, (child, index) => {\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${index === activeIndex ? \"active\" : \"\"}`,\n          onClick: () => {\n            console.log(\"index: \", index);\n            updateIndex(index);\n          },\n          children: index + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 29\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"arrorButtonLink\",\n        onClick: () => updateIndex(activeIndex + 1),\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}; // #endregion\n\n\n_s(Carousel, \"uVn28Uz2dR0MUMmR224Or+FFSpI=\", false, function () {\n  return [useSwipeable];\n});\n\n_c2 = Carousel;\nexport default Carousel;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CarouselItem\");\n$RefreshReg$(_c2, \"Carousel\");","map":{"version":3,"sources":["/Users/dilyaratulegenova/Documents/github/MyOwnPortfolio/myportfolio/src/Components/Carousel/Carousel.js"],"names":["React","useState","useEffect","useSwipeable","carousel","marginTop","paddingTop","paddingBottom","overflow","backgroundColor","width","CarouselItem","children","console","log","display","alignItems","justifyContent","height","border","Carousel","dumArr","Array","Math","ceil","length","paused","setPaused","activeIndex","setActiveIndex","updateIndex","newIndex","Children","count","interval","setInterval","clearInterval","handlers","onSwipedLeft","onSwipedRight","transform","whiteSpace","transition","map","child","index","cloneElement"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport \"./Carousel.css\";\nimport { useSwipeable } from \"react-swipeable\";\n\n\n\n\nconst carousel = {\n    marginTop: \"2rem\",\n    paddingTop: \"2rem\",\n    paddingBottom: \"2rem\",\n    overflow: \"hidden\",\n    backgroundColor: \"yellow\",\n    width: \"100%\"\n}\n\n\n\n\n\nexport const CarouselItem = ({ children, width }) => {\n    console.log(\"CarouselItem: \", children)\n    return (<div style={{\n        width: width,\n        display: \"inline-flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        height: \"500px\",\n        border: \"2px solid red\",\n\n\n\n    }}>\n        {children}\n    </div>\n    );\n}\n\n\nconst Carousel = ({ children }) => {\n\n\n    let dumArr = new Array(Math.ceil(children.length / 2))\n    const [paused, setPaused] = useState(false);\n    const [activeIndex, setActiveIndex] = useState(0);\n\n    const updateIndex = (newIndex) => {\n        if (newIndex < 0) {\n            newIndex = React.Children.count(children) - 2;\n\n        } else if (newIndex >= React.Children.count(children) / 2) {\n            newIndex = 0;\n        }\n\n        setActiveIndex(newIndex);\n    }\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (!paused) {\n                updateIndex(activeIndex + 1);\n            }\n        }, 3000);\n\n        return () => {\n            if (interval) {\n                clearInterval(interval);\n            }\n        };\n    })\n\n    const handlers = useSwipeable({\n        onSwipedLeft: () => updateIndex(activeIndex + 1),\n        onSwipedRight: () => updateIndex(activeIndex - 1)\n    })\n\n    return (\n        <div {...handlers}\n            style={carousel} onMouseEnter={() => setPaused(true)} onMouseLeave={() => setPaused(false)}>\n            <div style={{\n                transform: `translateX(-${activeIndex * 100}%)`,\n                whiteSpace: \"nowrap\",\n                transition: \"transform 0.3s\",\n\n            }}>\n                {\n                    React.Children.map(children, (child, index) => {\n                        return React.cloneElement(child, { width: \"50%\" });\n                    })}\n            </div>\n            <div className=\"indicators\">\n                <button className=\"arrorButtonLink\" onClick={() => {\n                    console.log(activeIndex)\n                    return updateIndex(activeIndex - 1)\n                }}>\n                    Prev\n            </button>\n                {\n                    React.Children.map(dumArr, (child, index) => {\n                        return (\n                            <button\n                                className={`${index === activeIndex ? \"active\" : \"\"}`}\n                                onClick={() => {\n                                    console.log(\"index: \", index)\n                                    updateIndex(index)\n                                }}>\n                                {index + 1}\n                            </button>\n                        )\n                    })\n                }\n                <button className=\"arrorButtonLink\" onClick={() => updateIndex(activeIndex + 1)}>\n                    Next\n            </button>\n\n            </div>\n        </div>\n    );\n}\n\n\n// #endregion\n\nexport default Carousel;"]},"metadata":{},"sourceType":"module"}